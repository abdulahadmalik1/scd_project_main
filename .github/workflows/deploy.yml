name: Build and Deploy to Minikube

on:
  push:
    branches:
      - main

jobs:
  build-deploy:
    runs-on: self-hosted
    timeout-minutes: 10  # Add a timeout to prevent jobs from hanging indefinitely

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Check directory structure
      run: |
        echo "Checking directory structure..."
        ls -la app/

    - name: Set up Docker to use Minikube's environment
      run: |
        echo "Configuring Docker to use Minikube's daemon..."
        eval $(minikube docker-env)

    - name: Clean up existing resources
      run: |
        echo "Cleaning up existing Kubernetes resources..."
        kubectl delete deployments --all || true
        kubectl delete services --all || true
        kubectl delete configmaps --all || true
        kubectl delete pods --all || true
        kubectl delete pvc --all || true

    - name: Build Docker images
      run: |
        echo "Building Docker images..."
        # Build frontend image from app/frontend directory
        docker build -t abdulahadmalik/attendance-frontend:latest ./app/frontend
        
        # Build backend image from app/backend directory
        docker build -t abdulahadmalik/attendance-backend:latest ./app/backend

    - name: Login to Docker Hub
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "abdulahadmalik" --password-stdin

    - name: Push Docker images to Docker Hub
      run: |
        echo "Pushing images to Docker Hub..."
        docker push abdulahadmalik/attendance-frontend:latest
        docker push abdulahadmalik/attendance-backend:latest

    - name: Deploy to Kubernetes
      run: |
        echo "Deploying to Kubernetes..."
        kubectl apply -f deployment.yaml
        kubectl apply -f service.yaml
        kubectl apply -f nginx-configmap.yaml
        kubectl apply -f localhost-service.yaml
        
        # Update frontend deployment to use the nginx config
        kubectl patch deployment frontend --patch '
        {
          "spec": {
            "template": {
              "spec": {
                "containers": [{
                  "name": "frontend",
                  "volumeMounts": [{
                    "name": "nginx-config",
                    "mountPath": "/etc/nginx/conf.d/default.conf",
                    "subPath": "default.conf"
                  }]
                }],
                "volumes": [{
                  "name": "nginx-config",
                  "configMap": {
                    "name": "nginx-config"
                  }
                }]
              }
            }
          }
        }'
        
        # Restart the frontend deployment to apply changes
        kubectl rollout restart deployment frontend

    - name: Wait for deployments to be ready
      run: |
        echo "Waiting for deployments to be ready..."
        kubectl rollout status deployment/frontend --timeout=90s || true
        kubectl rollout status deployment/backend --timeout=90s || true
        kubectl rollout status deployment/mongodb --timeout=90s || true

    - name: Display basic service information
      run: |
        echo "Service information:"
        kubectl get services
        
        # Get NodePort values directly using kubectl instead of minikube service
        echo "Frontend NodePort:"
        kubectl get service frontend -o jsonpath='{.spec.ports[0].nodePort}'
        echo ""
        
        echo "Backend NodePort:"
        kubectl get service backend -o jsonpath='{.spec.ports[0].nodePort}'
        echo ""
        
        # Get Minikube IP without using minikube service
        echo "Minikube IP:"
        minikube ip

    - name: Provide access instructions
      run: |
        echo "=== DEPLOYMENT SUCCESSFUL ==="
        echo "To access your application, execute these commands manually:"
        echo ""
        echo "For frontend access:"
        echo "kubectl port-forward deployment/frontend 8080:3000"
        echo "Then open: http://localhost:8080"
        echo ""
        echo "For backend access:"
        echo "kubectl port-forward deployment/backend 5000:5000"
        echo "Then access API at: http://localhost:5000/api/..."
        echo ""
        echo "For full application functionality, run both port-forward commands in separate terminals."